{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Long lived application load balancer for {{ alb_dns_name|default('something...presumably') }}",
  "Parameters": {
    "VPC" : {
      "Type" : "AWS::EC2::VPC::Id"
    },
    "SecurityGroups": {
      "Type" : "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetIDs" : {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of an existing subnet IDs to use for the load balancer and auto scaling group"
    }
  },
  "Resources": {
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "{{ alb_scheme }}",
        "Subnets": { "Ref" : "SubnetIDs" },
        {% if alb_attributes is defined %}
        "LoadBalancerAttributes" : [
          {% if alb_logging_enabled is defined %}
            {
            "Key" : "access_logs.s3.enabled",
            "Value" : "{{ alb_logging_enabled }}"
            }
          {% endif %}
          {% if alb_logging_enabled is defined and alb_logging_enabled == 'true' %}
          ,{
            "Key" : "access_logs.s3.bucket",
            "Value" : "{{ alb_logging_bucket }}"
          }
          {% endif %}
          {% if alb_logging_enabled is defined and alb_logging_enabled == 'true' %}
          ,{
            "Key" : "access_logs.s3.prefix",
            "Value" : "{{ alb_logging_prefix }}",
          }
          {% endif %}
          {% if alb_deletion_protection is defined %}
          ,{
            "Key" : "deletion_protection.enabled",
            "Value" : "{{ alb_deletion_protection }}"
          }
          {% endif %}
          {% if alb_idle_timeout_seconds is defined %}
          ,{
            "Key" : "idle_timeout.timeout_seconds",
            "Value" : "{{ alb_idle_timeout_seconds }}"
          }
          {% endif %}
        ],
        {% endif %}
        "SecurityGroups": {"Ref" : "SecurityGroups" }
      }
    },
    {% for listener in alb_listeners %}
    "{{ listener.name }}":{
    "Type" : "AWS::ElasticLoadBalancingV2::Listener",
    "Properties" : {
      {% if listener.protocol == 'https' and listener.certificates is defined %}
      "Certificates" : [
        {% for certificate in listener.certificates %}
        { "CertificateArn" : "{{ certificate.certificate_arn }}" } {% if not loop.last %}, {% endif %}
        {% endfor %}
      ],
      {% endif %}
      "DefaultActions" : [
      {% for action in listener.default_actions %}
      {
        "Type" : "{{ action.type }}",
        "TargetGroupArn" : { "Ref" : "{{ action.target_group_name }}" }
      }
      {% if not loop.last %}, {% endif %}
      {% endfor %}
      ],
      "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" } ,
      "Port" : "{{ listener.port }}",
      "Protocol" : "{{ listener.protocol | default('tcp') }}"
      {% if listener.ssl_policy is defined %}ÃŸ
      , "SslPolicy" : "{{ listener.ssl_policy }}"
      {% endif %}
    }
  } {% if not loop.last %}, {% endif %}
  {% endfor %}
  ,
  {# Create the target group for the Application Load Balancer #}
  {% for target_group in alb_target_groups %}
    "{{ target_group.name }}":{
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : "{{ alb_health_check_interval_seconds }}",
        "HealthCheckPath" : "{{ target_group.health_check_path | default(alb_health_check_path) }}",
        "HealthCheckPort" : "{{ target_group.port }}",
        "HealthCheckProtocol" : "{{ alb_health_check_protocol }}",
        "HealthCheckTimeoutSeconds" : "{{ alb_health_check_timeout_seconds }}",
        "HealthyThresholdCount" : "{{ alb_healthy_threshold_count }}",
        {% if target_group.matcher is defined %}
           "Matcher" : "{{ target_group.matcher }}",
        {% endif %}
        "Name" : "{{ target_group.name }}",
        "Port" : "{{ target_group.port }}",
        "Protocol" : "{{ target_group.protocol | default('tcp')}}",
        "Targets" : [
        {% for target in target_group.targets %}
          { "Id": "{{ target.id }}", "Port": "{{ target.port }}" }{% if not loop.last %}, {% endif %}
        {% endfor %}
        ],
        "UnhealthyThresholdCount" : "{{ alb_unhealthy_threshold_count }}",
        "VpcId" : { "Ref" : "VPC" }
    }
  } {% if not loop.last %}, {% endif %}
  {% endfor %}
  ,
  {# Create the listener rules for the Application Load Balancer Listener and TargetGroup #}
  {% for rule in alb_listener_rules %}
    "{{ rule.name }}":{
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
        {% for action in rule.actions %}
        {
          "Type":"{{ action.type }}",
          "TargetGroupArn": { "Ref" : "{{ action.target_group_name }}" }
        }
        {% if not loop.last %}, {% endif %}
        {% endfor %}
        ],
        "Conditions": [{
          "Field": "path-pattern",
          "Values": [ "{{ rule.pattern }}" ]
        }],
        "ListenerArn": { "Ref": "{{ rule.listener }}"},
        "Priority": "{{ rule.priority }}"
      }
    } {% if not loop.last %}, {% endif %}
    {% endfor %}
    {% if alb_dns_name is defined %}
    ,
    "DNSRecord" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneName" : {% if alb_zone_name is defined %}"{{ alb_zone_name | regex_replace('([^.])$', '\\1.') }}"{% else %}"{{ alb_dns_name | regex_replace('([^.])$', '\\1.') }}"{% endif %},
        "Comment" : "alias targeted to LoadBalancer for {{alb_stack_name}}",
        "RecordSets" : [
          {
            "Name" : "{{ alb_dns_name }}",
            "Type" : "A",
            "AliasTarget" : {
              "DNSName" : { "Fn::GetAtt" : ["LoadBalancer", "DNSName"] },
              "HostedZoneId" : { "Fn::GetAtt" : ["LoadBalancer","CanonicalHostedZoneNameID"] }
            }
          }
        ]
      }
    }
    {% endif %}
  },
  "Outputs": {
    "LoadBalancerName": {
      "Description": "Long Lived Load Balancer name",
      "Value": {"Ref": "ApplicationLoadBalancer" }
    },
    "DnsName": {
      "Description": "Add backends to this security group to allow access from the ALB",
      "Value": {"Fn::GetAtt": [ "ApplicationLoadBalancer", "DNSName" ]}
    }
  }
}
